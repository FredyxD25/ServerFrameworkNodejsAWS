{
  "D:\\Datos Fredy\\Programacion\\ServerFrameworkNodejsAWS\\serverless.yml": {
    "versionFramework": "4.11.1",
    "servicePath": "D:\\Datos Fredy\\Programacion\\ServerFrameworkNodejsAWS\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "fredyxd25",
      "service": "aws-lambda",
      "custom": {
        "tableName": "ProyectosTareas"
      },
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:PutItem",
              "dynamodb:GetItem",
              "dynamodb:Scan",
              "dynamodb:DeleteItem",
              "dynamodb:UpdateItem",
              "dynamodb:Query"
            ],
            "Resource": [
              "arn:aws:dynamodb:us-east-1:*:table/ProyectosTareas",
              "arn:aws:dynamodb:us-east-1:*:table/ProyectosTareas/index/GSI1"
            ]
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetAllUsersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-getAllUsers"
              }
            },
            "GetUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-getUser"
              }
            },
            "PostUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-postUser"
              }
            },
            "PutUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-putUser"
              }
            },
            "DeleteUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-deleteUser"
              }
            },
            "GetAllProjectsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-getAllProjects"
              }
            },
            "GetProjectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-getProject"
              }
            },
            "PostProjectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-postProject"
              }
            },
            "PutProjectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-putProject"
              }
            },
            "DeleteProjectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-deleteProject"
              }
            },
            "PostTasksByProjectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-postTasksByProject"
              }
            },
            "PutTasksByProjectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-putTasksByProject"
              }
            },
            "DeleteTasksByProjectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-deleteTasksByProject"
              }
            },
            "PostUserToProjectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-postUserToProject"
              }
            },
            "PostUserToTaskLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-dev-postUserToTask"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "aws-lambda",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:Scan",
                            "dynamodb:DeleteItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:Query"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:us-east-1:*:table/ProyectosTareas",
                            "arn:aws:dynamodb:us-east-1:*:table/ProyectosTareas/index/GSI1"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "aws-lambda",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetAllUsersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/handlers/User/getAllUsers.getAllUsers",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-getAllUsers",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllUsersLogGroup"
              ]
            },
            "GetUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/handlers/User/getUser.getUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-getUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserLogGroup"
              ]
            },
            "PostUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/handlers/User/postUser.postUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-postUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PostUserLogGroup"
              ]
            },
            "PutUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/handlers/User/putUser.putUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-putUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PutUserLogGroup"
              ]
            },
            "DeleteUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/handlers/User/deleteUser.deleteUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-deleteUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteUserLogGroup"
              ]
            },
            "GetAllProjectsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/handlers/Projects/getAllProjects.getAllProjects",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-getAllProjects",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllProjectsLogGroup"
              ]
            },
            "GetProjectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/handlers/Projects/getProject.getProject",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-getProject",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetProjectLogGroup"
              ]
            },
            "PostProjectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/handlers/Projects/postProject.postProject",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-postProject",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PostProjectLogGroup"
              ]
            },
            "PutProjectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/handlers/Projects/putProject.putProject",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-putProject",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PutProjectLogGroup"
              ]
            },
            "DeleteProjectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/handlers/Projects/deleteProject.deleteProject",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-deleteProject",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteProjectLogGroup"
              ]
            },
            "PostTasksByProjectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/services/tasks/postTasksByProject.postTasksByProject",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-postTasksByProject",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PostTasksByProjectLogGroup"
              ]
            },
            "PutTasksByProjectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/services/tasks/putTasksByProject.putTasksByProject",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-putTasksByProject",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PutTasksByProjectLogGroup"
              ]
            },
            "DeleteTasksByProjectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/services/tasks/deleteTasksByProject.deleteTasksByProject",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-deleteTasksByProject",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteTasksByProjectLogGroup"
              ]
            },
            "PostUserToProjectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/services/postUserToProject.postUserToProject",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-postUserToProject",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PostUserToProjectLogGroup"
              ]
            },
            "PostUserToTaskLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                  "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
                },
                "Handler": "src/services/postUserToTask.postUserToTask",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-dev-postUserToTask",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PostUserToTaskLogGroup"
              ]
            },
            "GetAllUsersLambdaVersionljrkGVGcsxX2Tgj2zwLxdWyDwcaiZMAdsN3zTkeKqY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllUsersLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "GetUserLambdaVersionvZO9RpL6orey6jBJNq9lt1dijkCNQwLJzMzKbVeqk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "PostUserLambdaVersionIEQ2Y1EZvjfzWFyYRNhnoNJ5UCzMP1jzOQCM9cuo8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PostUserLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "PutUserLambdaVersionLrjVVbMmAah8hvdqy5aZe4YQMqK9ZtrhvI1hnVjjgk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PutUserLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "DeleteUserLambdaVersionXFEWlEFmpIHkvtMWoPKiIJKiCyuy8CVmQoVDD1JoA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteUserLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "GetAllProjectsLambdaVersionu8OiXP4wVtBZcqNGP6BUwOJ2MmAawrOK8FdNB9856eY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllProjectsLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "GetProjectLambdaVersionBPR5RSqlWoxfsv2IFqHgxI8mROCt0B5r5RZDlN9nzgI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetProjectLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "PostProjectLambdaVersionyAx1nK3wlRhvXVJB0HB6TQ1bbQS6Y88JXcYYPIgZflo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PostProjectLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "PutProjectLambdaVersionIlYRT1p90Z6zQO1SAIZKbuOycx8843Zl4u0NS7VG8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PutProjectLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "DeleteProjectLambdaVersioncXztuTkJ8YD87DpsrY0MN9ja8E3BRydtiyl7GP4MI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteProjectLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "PostTasksByProjectLambdaVersionQBHJH3cAGxRNxU9HEEa043sBrSK0iCttR96miHDHOM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PostTasksByProjectLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "PutTasksByProjectLambdaVersionQCMsaQNrGOM1u7YCGD6UN9SXCXI0i8k7yOcfJ7y0nw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PutTasksByProjectLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "DeleteTasksByProjectLambdaVersionASOe6ofrZzW6tlzrScXRkWpZ8th8s73lUSgUOUGPF3E": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteTasksByProjectLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "PostUserToProjectLambdaVersiononr5Cu2EDAB2YakiKFtX9uuH6GCqGb4KJ7p3YrzlTE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PostUserToProjectLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "PostUserToTaskLambdaVersionsR4oHBCbZHVvRh8UimlCoS4htVwugg47FWgzuuJ9nY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PostUserToTaskLambdaFunction"
                },
                "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-aws-lambda",
                "ProtocolType": "HTTP"
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "GetAllUsersLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAllUsers": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAllUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetUser": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /user",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAllUsers"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAllUsers"
            },
            "GetUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetUserUseridVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /user/{userId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetUser"
            },
            "PostUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PostUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationPostUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "PostUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostUser": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /user",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationPostUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationPostUser"
            },
            "PutUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PutUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationPutUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "PutUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutUserUseridVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /user/{userId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationPutUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationPutUser"
            },
            "DeleteUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteUserUseridVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /user/{userId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteUser"
            },
            "GetAllProjectsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllProjectsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAllProjects": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAllProjectsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetProject": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /project",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAllProjects"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAllProjects"
            },
            "GetProjectLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetProject": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetProjectProjectidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /project/{projectId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetProject"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetProject"
            },
            "PostProjectLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PostProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationPostProject": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "PostProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostProject": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /project",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationPostProject"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationPostProject"
            },
            "PutProjectLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PutProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationPutProject": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "PutProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutProjectProjectidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /project/{projectId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationPutProject"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationPutProject"
            },
            "DeleteProjectLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteProject": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteProjectProjectidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /project/{projectId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteProject"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteProject"
            },
            "PostTasksByProjectLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PostTasksByProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationPostTasksByProject": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "PostTasksByProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostTaskbyproject": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /taskbyproject",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationPostTasksByProject"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationPostTasksByProject"
            },
            "PutTasksByProjectLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PutTasksByProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationPutTasksByProject": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "PutTasksByProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutTaskbyprojectProjectidVarTaskidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /taskbyproject/{projectId}/{taskId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationPutTasksByProject"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationPutTasksByProject"
            },
            "DeleteTasksByProjectLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteTasksByProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteTasksByProject": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteTasksByProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteTaskbyprojectProjectidVarTaskidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /taskbyproject/{projectId}/{taskId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteTasksByProject"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteTasksByProject"
            },
            "PostUserToProjectLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PostUserToProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationPostUserToProject": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "PostUserToProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostUsertoproject": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /usertoproject",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationPostUserToProject"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationPostUserToProject"
            },
            "PostUserToTaskLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PostUserToTaskLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationPostUserToTask": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "PostUserToTaskLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostUsertotask": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /usertotask",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationPostUserToTask"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationPostUserToTask"
            },
            "ProjectSystemTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "ProyectosTareas",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "PK",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "SK",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "GSI1PK",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "GSI1SK",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "PK",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "SK",
                    "KeyType": "RANGE"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "GSI1",
                    "KeySchema": [
                      {
                        "AttributeName": "GSI1PK",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "GSI1SK",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "Export": {
                "Name": "sls-aws-lambda-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetAllUsersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllUsersLambdaVersionljrkGVGcsxX2Tgj2zwLxdWyDwcaiZMAdsN3zTkeKqY"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-GetAllUsersLambdaFunctionQualifiedArn"
              }
            },
            "GetUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserLambdaVersionvZO9RpL6orey6jBJNq9lt1dijkCNQwLJzMzKbVeqk"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-GetUserLambdaFunctionQualifiedArn"
              }
            },
            "PostUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PostUserLambdaVersionIEQ2Y1EZvjfzWFyYRNhnoNJ5UCzMP1jzOQCM9cuo8"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-PostUserLambdaFunctionQualifiedArn"
              }
            },
            "PutUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PutUserLambdaVersionLrjVVbMmAah8hvdqy5aZe4YQMqK9ZtrhvI1hnVjjgk"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-PutUserLambdaFunctionQualifiedArn"
              }
            },
            "DeleteUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteUserLambdaVersionXFEWlEFmpIHkvtMWoPKiIJKiCyuy8CVmQoVDD1JoA"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-DeleteUserLambdaFunctionQualifiedArn"
              }
            },
            "GetAllProjectsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllProjectsLambdaVersionu8OiXP4wVtBZcqNGP6BUwOJ2MmAawrOK8FdNB9856eY"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-GetAllProjectsLambdaFunctionQualifiedArn"
              }
            },
            "GetProjectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetProjectLambdaVersionBPR5RSqlWoxfsv2IFqHgxI8mROCt0B5r5RZDlN9nzgI"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-GetProjectLambdaFunctionQualifiedArn"
              }
            },
            "PostProjectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PostProjectLambdaVersionyAx1nK3wlRhvXVJB0HB6TQ1bbQS6Y88JXcYYPIgZflo"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-PostProjectLambdaFunctionQualifiedArn"
              }
            },
            "PutProjectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PutProjectLambdaVersionIlYRT1p90Z6zQO1SAIZKbuOycx8843Zl4u0NS7VG8"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-PutProjectLambdaFunctionQualifiedArn"
              }
            },
            "DeleteProjectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteProjectLambdaVersioncXztuTkJ8YD87DpsrY0MN9ja8E3BRydtiyl7GP4MI"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-DeleteProjectLambdaFunctionQualifiedArn"
              }
            },
            "PostTasksByProjectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PostTasksByProjectLambdaVersionQBHJH3cAGxRNxU9HEEa043sBrSK0iCttR96miHDHOM"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-PostTasksByProjectLambdaFunctionQualifiedArn"
              }
            },
            "PutTasksByProjectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PutTasksByProjectLambdaVersionQCMsaQNrGOM1u7YCGD6UN9SXCXI0i8k7yOcfJ7y0nw"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-PutTasksByProjectLambdaFunctionQualifiedArn"
              }
            },
            "DeleteTasksByProjectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteTasksByProjectLambdaVersionASOe6ofrZzW6tlzrScXRkWpZ8th8s73lUSgUOUGPF3E"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-DeleteTasksByProjectLambdaFunctionQualifiedArn"
              }
            },
            "PostUserToProjectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PostUserToProjectLambdaVersiononr5Cu2EDAB2YakiKFtX9uuH6GCqGb4KJ7p3YrzlTE"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-PostUserToProjectLambdaFunctionQualifiedArn"
              }
            },
            "PostUserToTaskLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PostUserToTaskLambdaVersionsR4oHBCbZHVvRh8UimlCoS4htVwugg47FWgzuuJ9nY"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-PostUserToTaskLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-aws-lambda-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "package": {
        "include": [
          "node_modules/aws-sdk/**"
        ],
        "artifactsS3KeyDirname": "serverless/aws-lambda/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
        "artifact": "D:\\Datos Fredy\\Programacion\\ServerFrameworkNodejsAWS\\.serverless\\aws-lambda.zip",
        "artifactDirectoryName": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z"
      },
      "functions": {
        "getAllUsers": {
          "handler": "src/handlers/User/getAllUsers.getAllUsers",
          "events": [
            {
              "httpApi": {
                "path": "/user",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/user"
            }
          ],
          "name": "aws-lambda-dev-getAllUsers",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAllUsersLambdaVersionljrkGVGcsxX2Tgj2zwLxdWyDwcaiZMAdsN3zTkeKqY"
        },
        "getUser": {
          "handler": "src/handlers/User/getUser.getUser",
          "events": [
            {
              "httpApi": {
                "path": "/user/{userId}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/user/{userId}"
            }
          ],
          "name": "aws-lambda-dev-getUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserLambdaVersionvZO9RpL6orey6jBJNq9lt1dijkCNQwLJzMzKbVeqk"
        },
        "postUser": {
          "handler": "src/handlers/User/postUser.postUser",
          "events": [
            {
              "httpApi": {
                "path": "/user",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/user"
            }
          ],
          "name": "aws-lambda-dev-postUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PostUserLambdaVersionIEQ2Y1EZvjfzWFyYRNhnoNJ5UCzMP1jzOQCM9cuo8"
        },
        "putUser": {
          "handler": "src/handlers/User/putUser.putUser",
          "events": [
            {
              "httpApi": {
                "path": "/user/{userId}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/user/{userId}"
            }
          ],
          "name": "aws-lambda-dev-putUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PutUserLambdaVersionLrjVVbMmAah8hvdqy5aZe4YQMqK9ZtrhvI1hnVjjgk"
        },
        "deleteUser": {
          "handler": "src/handlers/User/deleteUser.deleteUser",
          "events": [
            {
              "httpApi": {
                "path": "/user/{userId}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/user/{userId}"
            }
          ],
          "name": "aws-lambda-dev-deleteUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteUserLambdaVersionXFEWlEFmpIHkvtMWoPKiIJKiCyuy8CVmQoVDD1JoA"
        },
        "getAllProjects": {
          "handler": "src/handlers/Projects/getAllProjects.getAllProjects",
          "events": [
            {
              "httpApi": {
                "path": "/project",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/project"
            }
          ],
          "name": "aws-lambda-dev-getAllProjects",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAllProjectsLambdaVersionu8OiXP4wVtBZcqNGP6BUwOJ2MmAawrOK8FdNB9856eY"
        },
        "getProject": {
          "handler": "src/handlers/Projects/getProject.getProject",
          "events": [
            {
              "httpApi": {
                "path": "/project/{projectId}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/project/{projectId}"
            }
          ],
          "name": "aws-lambda-dev-getProject",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetProjectLambdaVersionBPR5RSqlWoxfsv2IFqHgxI8mROCt0B5r5RZDlN9nzgI"
        },
        "postProject": {
          "handler": "src/handlers/Projects/postProject.postProject",
          "events": [
            {
              "httpApi": {
                "path": "/project",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/project"
            }
          ],
          "name": "aws-lambda-dev-postProject",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PostProjectLambdaVersionyAx1nK3wlRhvXVJB0HB6TQ1bbQS6Y88JXcYYPIgZflo"
        },
        "putProject": {
          "handler": "src/handlers/Projects/putProject.putProject",
          "events": [
            {
              "httpApi": {
                "path": "/project/{projectId}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/project/{projectId}"
            }
          ],
          "name": "aws-lambda-dev-putProject",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PutProjectLambdaVersionIlYRT1p90Z6zQO1SAIZKbuOycx8843Zl4u0NS7VG8"
        },
        "deleteProject": {
          "handler": "src/handlers/Projects/deleteProject.deleteProject",
          "events": [
            {
              "httpApi": {
                "path": "/project/{projectId}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/project/{projectId}"
            }
          ],
          "name": "aws-lambda-dev-deleteProject",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteProjectLambdaVersioncXztuTkJ8YD87DpsrY0MN9ja8E3BRydtiyl7GP4MI"
        },
        "postTasksByProject": {
          "handler": "src/services/tasks/postTasksByProject.postTasksByProject",
          "events": [
            {
              "httpApi": {
                "path": "/taskbyproject",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/taskbyproject"
            }
          ],
          "name": "aws-lambda-dev-postTasksByProject",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PostTasksByProjectLambdaVersionQBHJH3cAGxRNxU9HEEa043sBrSK0iCttR96miHDHOM"
        },
        "putTasksByProject": {
          "handler": "src/services/tasks/putTasksByProject.putTasksByProject",
          "events": [
            {
              "httpApi": {
                "path": "/taskbyproject/{projectId}/{taskId}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/taskbyproject/{projectId}/{taskId}"
            }
          ],
          "name": "aws-lambda-dev-putTasksByProject",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PutTasksByProjectLambdaVersionQCMsaQNrGOM1u7YCGD6UN9SXCXI0i8k7yOcfJ7y0nw"
        },
        "deleteTasksByProject": {
          "handler": "src/services/tasks/deleteTasksByProject.deleteTasksByProject",
          "events": [
            {
              "httpApi": {
                "path": "/taskbyproject/{projectId}/{taskId}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/taskbyproject/{projectId}/{taskId}"
            }
          ],
          "name": "aws-lambda-dev-deleteTasksByProject",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteTasksByProjectLambdaVersionASOe6ofrZzW6tlzrScXRkWpZ8th8s73lUSgUOUGPF3E"
        },
        "postUserToProject": {
          "handler": "src/services/postUserToProject.postUserToProject",
          "events": [
            {
              "httpApi": {
                "path": "/usertoproject",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/usertoproject"
            }
          ],
          "name": "aws-lambda-dev-postUserToProject",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PostUserToProjectLambdaVersiononr5Cu2EDAB2YakiKFtX9uuH6GCqGb4KJ7p3YrzlTE"
        },
        "postUserToTask": {
          "handler": "src/services/postUserToTask.postUserToTask",
          "events": [
            {
              "httpApi": {
                "path": "/usertotask",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/usertotask"
            }
          ],
          "name": "aws-lambda-dev-postUserToTask",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PostUserToTaskLambdaVersionsR4oHBCbZHVvRh8UimlCoS4htVwugg47FWgzuuJ9nY"
        }
      },
      "resources": {
        "Resources": {
          "ProjectSystemTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ProyectosTareas",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "SK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "GSI1PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "GSI1SK",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "PK",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "SK",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "GSI1",
                  "KeySchema": [
                    {
                      "AttributeName": "GSI1PK",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "GSI1SK",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-east-1",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem",
            "dynamodb:GetItem",
            "dynamodb:Scan",
            "dynamodb:DeleteItem",
            "dynamodb:UpdateItem",
            "dynamodb:Query"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:*:table/ProyectosTareas",
            "arn:aws:dynamodb:us-east-1:*:table/ProyectosTareas/index/GSI1"
          ]
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetAllUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-getAllUsers"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-getUser"
            }
          },
          "PostUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-postUser"
            }
          },
          "PutUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-putUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-deleteUser"
            }
          },
          "GetAllProjectsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-getAllProjects"
            }
          },
          "GetProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-getProject"
            }
          },
          "PostProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-postProject"
            }
          },
          "PutProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-putProject"
            }
          },
          "DeleteProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-deleteProject"
            }
          },
          "PostTasksByProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-postTasksByProject"
            }
          },
          "PutTasksByProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-putTasksByProject"
            }
          },
          "DeleteTasksByProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-deleteTasksByProject"
            }
          },
          "PostUserToProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-postUserToProject"
            }
          },
          "PostUserToTaskLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-dev-postUserToTask"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-lambda",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem",
                          "dynamodb:GetItem",
                          "dynamodb:Scan",
                          "dynamodb:DeleteItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:Query"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-east-1:*:table/ProyectosTareas",
                          "arn:aws:dynamodb:us-east-1:*:table/ProyectosTareas/index/GSI1"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-lambda",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetAllUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/handlers/User/getAllUsers.getAllUsers",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-getAllUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllUsersLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/handlers/User/getUser.getUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "PostUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/handlers/User/postUser.postUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-postUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostUserLogGroup"
            ]
          },
          "PutUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/handlers/User/putUser.putUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-putUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PutUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/handlers/User/deleteUser.deleteUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-deleteUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "GetAllProjectsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/handlers/Projects/getAllProjects.getAllProjects",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-getAllProjects",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllProjectsLogGroup"
            ]
          },
          "GetProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/handlers/Projects/getProject.getProject",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-getProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProjectLogGroup"
            ]
          },
          "PostProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/handlers/Projects/postProject.postProject",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-postProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostProjectLogGroup"
            ]
          },
          "PutProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/handlers/Projects/putProject.putProject",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-putProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PutProjectLogGroup"
            ]
          },
          "DeleteProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/handlers/Projects/deleteProject.deleteProject",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-deleteProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteProjectLogGroup"
            ]
          },
          "PostTasksByProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/services/tasks/postTasksByProject.postTasksByProject",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-postTasksByProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostTasksByProjectLogGroup"
            ]
          },
          "PutTasksByProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/services/tasks/putTasksByProject.putTasksByProject",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-putTasksByProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PutTasksByProjectLogGroup"
            ]
          },
          "DeleteTasksByProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/services/tasks/deleteTasksByProject.deleteTasksByProject",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-deleteTasksByProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteTasksByProjectLogGroup"
            ]
          },
          "PostUserToProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/services/postUserToProject.postUserToProject",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-postUserToProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostUserToProjectLogGroup"
            ]
          },
          "PostUserToTaskLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
                "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
              },
              "Handler": "src/services/postUserToTask.postUserToTask",
              "Runtime": "nodejs20.x",
              "FunctionName": "aws-lambda-dev-postUserToTask",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostUserToTaskLogGroup"
            ]
          },
          "GetAllUsersLambdaVersionljrkGVGcsxX2Tgj2zwLxdWyDwcaiZMAdsN3zTkeKqY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllUsersLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "GetUserLambdaVersionvZO9RpL6orey6jBJNq9lt1dijkCNQwLJzMzKbVeqk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "PostUserLambdaVersionIEQ2Y1EZvjfzWFyYRNhnoNJ5UCzMP1jzOQCM9cuo8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostUserLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "PutUserLambdaVersionLrjVVbMmAah8hvdqy5aZe4YQMqK9ZtrhvI1hnVjjgk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PutUserLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "DeleteUserLambdaVersionXFEWlEFmpIHkvtMWoPKiIJKiCyuy8CVmQoVDD1JoA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "GetAllProjectsLambdaVersionu8OiXP4wVtBZcqNGP6BUwOJ2MmAawrOK8FdNB9856eY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllProjectsLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "GetProjectLambdaVersionBPR5RSqlWoxfsv2IFqHgxI8mROCt0B5r5RZDlN9nzgI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProjectLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "PostProjectLambdaVersionyAx1nK3wlRhvXVJB0HB6TQ1bbQS6Y88JXcYYPIgZflo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostProjectLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "PutProjectLambdaVersionIlYRT1p90Z6zQO1SAIZKbuOycx8843Zl4u0NS7VG8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PutProjectLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "DeleteProjectLambdaVersioncXztuTkJ8YD87DpsrY0MN9ja8E3BRydtiyl7GP4MI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteProjectLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "PostTasksByProjectLambdaVersionQBHJH3cAGxRNxU9HEEa043sBrSK0iCttR96miHDHOM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostTasksByProjectLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "PutTasksByProjectLambdaVersionQCMsaQNrGOM1u7YCGD6UN9SXCXI0i8k7yOcfJ7y0nw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PutTasksByProjectLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "DeleteTasksByProjectLambdaVersionASOe6ofrZzW6tlzrScXRkWpZ8th8s73lUSgUOUGPF3E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteTasksByProjectLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "PostUserToProjectLambdaVersiononr5Cu2EDAB2YakiKFtX9uuH6GCqGb4KJ7p3YrzlTE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostUserToProjectLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "PostUserToTaskLambdaVersionsR4oHBCbZHVvRh8UimlCoS4htVwugg47FWgzuuJ9nY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostUserToTaskLambdaFunction"
              },
              "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-aws-lambda",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "GetAllUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetAllUsersLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUser": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /user",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllUsers"
          },
          "GetUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUserUseridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /user/{userId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUser"
          },
          "PostUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPostUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "PostUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUser": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /user",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPostUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPostUser"
          },
          "PutUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PutUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPutUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "PutUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUserUseridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /user/{userId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPutUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPutUser"
          },
          "DeleteUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteUserUseridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /user/{userId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteUser"
          },
          "GetAllProjectsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllProjectsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllProjects": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetAllProjectsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetProject": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /project",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllProjects"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllProjects"
          },
          "GetProjectLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetProject": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetProjectLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetProjectProjectidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /project/{projectId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetProject"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetProject"
          },
          "PostProjectLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPostProject": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "PostProjectLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostProject": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /project",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPostProject"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPostProject"
          },
          "PutProjectLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PutProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPutProject": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "PutProjectLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutProjectProjectidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /project/{projectId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPutProject"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPutProject"
          },
          "DeleteProjectLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteProject": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DeleteProjectLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteProjectProjectidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /project/{projectId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteProject"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteProject"
          },
          "PostTasksByProjectLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostTasksByProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPostTasksByProject": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "PostTasksByProjectLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostTaskbyproject": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /taskbyproject",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPostTasksByProject"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPostTasksByProject"
          },
          "PutTasksByProjectLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PutTasksByProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPutTasksByProject": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "PutTasksByProjectLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutTaskbyprojectProjectidVarTaskidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /taskbyproject/{projectId}/{taskId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPutTasksByProject"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPutTasksByProject"
          },
          "DeleteTasksByProjectLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteTasksByProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteTasksByProject": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DeleteTasksByProjectLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteTaskbyprojectProjectidVarTaskidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /taskbyproject/{projectId}/{taskId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteTasksByProject"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteTasksByProject"
          },
          "PostUserToProjectLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostUserToProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPostUserToProject": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "PostUserToProjectLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsertoproject": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /usertoproject",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPostUserToProject"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPostUserToProject"
          },
          "PostUserToTaskLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostUserToTaskLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPostUserToTask": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "PostUserToTaskLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsertotask": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /usertotask",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPostUserToTask"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPostUserToTask"
          },
          "ProjectSystemTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ProyectosTareas",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "SK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "GSI1PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "GSI1SK",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "PK",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "SK",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "GSI1",
                  "KeySchema": [
                    {
                      "AttributeName": "GSI1PK",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "GSI1SK",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
            "Export": {
              "Name": "sls-aws-lambda-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetAllUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllUsersLambdaVersionljrkGVGcsxX2Tgj2zwLxdWyDwcaiZMAdsN3zTkeKqY"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-GetAllUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionvZO9RpL6orey6jBJNq9lt1dijkCNQwLJzMzKbVeqk"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "PostUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostUserLambdaVersionIEQ2Y1EZvjfzWFyYRNhnoNJ5UCzMP1jzOQCM9cuo8"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-PostUserLambdaFunctionQualifiedArn"
            }
          },
          "PutUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PutUserLambdaVersionLrjVVbMmAah8hvdqy5aZe4YQMqK9ZtrhvI1hnVjjgk"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-PutUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersionXFEWlEFmpIHkvtMWoPKiIJKiCyuy8CVmQoVDD1JoA"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "GetAllProjectsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllProjectsLambdaVersionu8OiXP4wVtBZcqNGP6BUwOJ2MmAawrOK8FdNB9856eY"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-GetAllProjectsLambdaFunctionQualifiedArn"
            }
          },
          "GetProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProjectLambdaVersionBPR5RSqlWoxfsv2IFqHgxI8mROCt0B5r5RZDlN9nzgI"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-GetProjectLambdaFunctionQualifiedArn"
            }
          },
          "PostProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostProjectLambdaVersionyAx1nK3wlRhvXVJB0HB6TQ1bbQS6Y88JXcYYPIgZflo"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-PostProjectLambdaFunctionQualifiedArn"
            }
          },
          "PutProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PutProjectLambdaVersionIlYRT1p90Z6zQO1SAIZKbuOycx8843Zl4u0NS7VG8"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-PutProjectLambdaFunctionQualifiedArn"
            }
          },
          "DeleteProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteProjectLambdaVersioncXztuTkJ8YD87DpsrY0MN9ja8E3BRydtiyl7GP4MI"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-DeleteProjectLambdaFunctionQualifiedArn"
            }
          },
          "PostTasksByProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostTasksByProjectLambdaVersionQBHJH3cAGxRNxU9HEEa043sBrSK0iCttR96miHDHOM"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-PostTasksByProjectLambdaFunctionQualifiedArn"
            }
          },
          "PutTasksByProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PutTasksByProjectLambdaVersionQCMsaQNrGOM1u7YCGD6UN9SXCXI0i8k7yOcfJ7y0nw"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-PutTasksByProjectLambdaFunctionQualifiedArn"
            }
          },
          "DeleteTasksByProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteTasksByProjectLambdaVersionASOe6ofrZzW6tlzrScXRkWpZ8th8s73lUSgUOUGPF3E"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-DeleteTasksByProjectLambdaFunctionQualifiedArn"
            }
          },
          "PostUserToProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostUserToProjectLambdaVersiononr5Cu2EDAB2YakiKFtX9uuH6GCqGb4KJ7p3YrzlTE"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-PostUserToProjectLambdaFunctionQualifiedArn"
            }
          },
          "PostUserToTaskLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostUserToTaskLambdaVersionsR4oHBCbZHVvRh8UimlCoS4htVwugg47FWgzuuJ9nY"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-PostUserToTaskLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-aws-lambda-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\r\norg: fredyxd25\r\n# \"service\" is the name of this project. This will also be added to your AWS resource names.\r\nservice: aws-lambda\r\n\r\ncustom:\r\n  tableName: ProyectosTareas\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  region: us-east-1\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:PutItem\r\n        - dynamodb:GetItem\r\n        - dynamodb:Scan\r\n        - dynamodb:DeleteItem\r\n        - dynamodb:UpdateItem\r\n        - dynamodb:Query\r\n      Resource:\r\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}\r\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}/index/GSI1\r\n\r\npackage:\r\n  include:\r\n    - node_modules/aws-sdk/**\r\n\r\nfunctions: #Funciones de Lambda\r\n\r\n#-------Funciones Usuario-----------------------------------------------------------\r\n\r\n  # Obtener todos los usuarios\r\n  getAllUsers:\r\n    handler: src/handlers/User/getAllUsers.getAllUsers\r\n    events:\r\n      - httpApi:\r\n          path: /user\r\n          method: get\r\n\r\n  # Obtener un usuario por ID\r\n  getUser:\r\n    handler: src/handlers/User/getUser.getUser\r\n    events:\r\n      - httpApi:\r\n          path: /user/{userId}\r\n          method: get\r\n\r\n  # Crear un usuario\r\n  postUser:\r\n    handler: src/handlers/User/postUser.postUser\r\n    events:\r\n      - httpApi:\r\n          path: /user\r\n          method: post\r\n  \r\n  #Actualizar un usuario\r\n  putUser:\r\n    handler: src/handlers/User/putUser.putUser\r\n    events:\r\n      - httpApi:\r\n          path: /user/{userId}\r\n          method: put\r\n  \r\n  #Eliminar un usuario\r\n  deleteUser:\r\n    handler: src/handlers/User/deleteUser.deleteUser\r\n    events:\r\n      - httpApi:\r\n          path: /user/{userId}\r\n          method: delete\r\n\r\n#----------Funciones Proyecto---------------------------------------------------\r\n\r\n  #Obtener todos los proyectos\r\n  getAllProjects:\r\n    handler: src/handlers/Projects/getAllProjects.getAllProjects\r\n    events:\r\n      - httpApi:\r\n          path: /project\r\n          method: get\r\n  #Obtener un proyecto por ID\r\n  getProject:\r\n    handler: src/handlers/Projects/getProject.getProject\r\n    events:\r\n      - httpApi:\r\n          path: /project/{projectId}\r\n          method: get\r\n  #Crear un proyecto\r\n  postProject:\r\n    handler: src/handlers/Projects/postProject.postProject\r\n    events:\r\n      - httpApi:\r\n          path: /project\r\n          method: post\r\n  \r\n  #Actualizar un proyecto\r\n  putProject:\r\n    handler: src/handlers/Projects/putProject.putProject\r\n    events:\r\n      - httpApi:\r\n          path: /project/{projectId}\r\n          method: put\r\n  \r\n  #Eliminar un proyecto\r\n  deleteProject:\r\n    handler: src/handlers/Projects/deleteProject.deleteProject\r\n    events:\r\n      - httpApi:\r\n          path: /project/{projectId}\r\n          method: delete\r\n  \r\n#----------Funciones Servicios---------------------------------------------------\r\n\r\n  #---------Tareas ---------------------------------------------------\r\n  #Asignar una tarea a un proyecto\r\n  postTasksByProject:\r\n    handler: src/services/tasks/postTasksByProject.postTasksByProject\r\n    events:\r\n      - httpApi:\r\n          path: /taskbyproject\r\n          method: post\r\n  \r\n  #Actualizar una tarea de un proyecto\r\n  putTasksByProject:\r\n    handler: src/services/tasks/putTasksByProject.putTasksByProject\r\n    events:\r\n      - httpApi:\r\n          path: /taskbyproject/{projectId}/{taskId}\r\n          method: put\r\n  \r\n  #Eliminar una tarea de un proyecto\r\n  deleteTasksByProject:\r\n    handler: src/services/tasks/deleteTasksByProject.deleteTasksByProject\r\n    events:\r\n      - httpApi:\r\n          path: /taskbyproject/{projectId}/{taskId}\r\n          method: delete\r\n\r\n\r\n\r\n\r\n\r\n  #Actualizar una tarea de un proyecto\r\n  postUserToProject:\r\n    handler: src/services/postUserToProject.postUserToProject\r\n    events:\r\n      - httpApi:\r\n          path: /usertoproject\r\n          method: post\r\n\r\n\r\n  #Asignar un usuario a una tarea\r\n  postUserToTask:\r\n    handler: src/services/postUserToTask.postUserToTask\r\n    events:\r\n      - httpApi:\r\n          path: /usertotask\r\n          method: post\r\n\r\n#------------Configuracion para DynamoDB-----------------------------------\r\nresources: \r\n  Resources:\r\n    ProjectSystemTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:custom.tableName}\r\n        BillingMode: PAY_PER_REQUEST  # Sin preocuparte por capacidad\r\n        AttributeDefinitions:\r\n          - AttributeName: PK\r\n            AttributeType: S\r\n          - AttributeName: SK\r\n            AttributeType: S\r\n          - AttributeName: GSI1PK\r\n            AttributeType: S\r\n          - AttributeName: GSI1SK\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: PK\r\n            KeyType: HASH\r\n          - AttributeName: SK\r\n            KeyType: RANGE\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: GSI1\r\n            KeySchema:\r\n              - AttributeName: GSI1PK\r\n                KeyType: HASH\r\n              - AttributeName: GSI1SK\r\n                KeyType: RANGE\r\n            Projection:\r\n              ProjectionType: ALL",
    "command": [
      "deploy"
    ],
    "options": {
      "verbose": true
    },
    "orgId": "b1732902-027e-4ae1-9ca4-7daec54c6562",
    "orgName": "fredyxd25",
    "userId": "J5zw71wzzXKDbQczKY",
    "userName": "fredyxd25",
    "serviceProviderAwsAccountId": "158735973681",
    "serviceProviderAwsCfStackName": "aws-lambda-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:158735973681:stack/aws-lambda-dev/9d1a5c60-134f-11f0-be8d-12f4bb44a6b5",
    "serviceProviderAwsCfStackCreated": "2025-04-07T01:28:30.871Z",
    "serviceProviderAwsCfStackUpdated": "2025-04-07T19:19:55.667Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "DeleteUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-deleteUser:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-DeleteUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PutProjectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-putProject:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-PutProjectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteProjectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-deleteProject:21",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-DeleteProjectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteTasksByProjectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-deleteTasksByProject:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-DeleteTasksByProjectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetProjectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-getProject:52",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-GetProjectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PostProjectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-postProject:52",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-PostProjectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-getUser:59",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-GetUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "irnl81bgk1",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-aws-lambda-dev-HttpApiId"
      },
      {
        "OutputKey": "PostUserToTaskLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-postUserToTask:31",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-PostUserToTaskLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
        "ExportName": "sls-aws-lambda-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "PostTasksByProjectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-postTasksByProject:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-PostTasksByProjectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PostUserToProjectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-postUserToProject:41",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-PostUserToProjectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://irnl81bgk1.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-aws-lambda-dev-HttpApiUrl"
      },
      {
        "OutputKey": "GetAllProjectsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-getAllProjects:50",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-GetAllProjectsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllUsersLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-getAllUsers:45",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-GetAllUsersLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PutUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-putUser:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-PutUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PostUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-postUser:60",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-PostUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PutTasksByProjectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:158735973681:function:aws-lambda-dev-putTasksByProject:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-dev-PutTasksByProjectLambdaFunctionQualifiedArn"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "GetAllUsersLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-getAllUsers"
          }
        },
        "GetUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-getUser"
          }
        },
        "PostUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-postUser"
          }
        },
        "PutUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-putUser"
          }
        },
        "DeleteUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-deleteUser"
          }
        },
        "GetAllProjectsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-getAllProjects"
          }
        },
        "GetProjectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-getProject"
          }
        },
        "PostProjectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-postProject"
          }
        },
        "PutProjectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-putProject"
          }
        },
        "DeleteProjectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-deleteProject"
          }
        },
        "PostTasksByProjectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-postTasksByProject"
          }
        },
        "PutTasksByProjectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-putTasksByProject"
          }
        },
        "DeleteTasksByProjectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-deleteTasksByProject"
          }
        },
        "PostUserToProjectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-postUserToProject"
          }
        },
        "PostUserToTaskLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/aws-lambda-dev-postUserToTask"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "aws-lambda",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem",
                        "dynamodb:GetItem",
                        "dynamodb:Scan",
                        "dynamodb:DeleteItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:Query"
                      ],
                      "Resource": [
                        "arn:aws:dynamodb:us-east-1:*:table/ProyectosTareas",
                        "arn:aws:dynamodb:us-east-1:*:table/ProyectosTareas/index/GSI1"
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "aws-lambda",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "GetAllUsersLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/handlers/User/getAllUsers.getAllUsers",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-getAllUsers",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAllUsersLogGroup"
          ]
        },
        "GetUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/handlers/User/getUser.getUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-getUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserLogGroup"
          ]
        },
        "PostUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/handlers/User/postUser.postUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-postUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PostUserLogGroup"
          ]
        },
        "PutUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/handlers/User/putUser.putUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-putUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PutUserLogGroup"
          ]
        },
        "DeleteUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/handlers/User/deleteUser.deleteUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-deleteUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteUserLogGroup"
          ]
        },
        "GetAllProjectsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/handlers/Projects/getAllProjects.getAllProjects",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-getAllProjects",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAllProjectsLogGroup"
          ]
        },
        "GetProjectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/handlers/Projects/getProject.getProject",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-getProject",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetProjectLogGroup"
          ]
        },
        "PostProjectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/handlers/Projects/postProject.postProject",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-postProject",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PostProjectLogGroup"
          ]
        },
        "PutProjectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/handlers/Projects/putProject.putProject",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-putProject",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PutProjectLogGroup"
          ]
        },
        "DeleteProjectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/handlers/Projects/deleteProject.deleteProject",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-deleteProject",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteProjectLogGroup"
          ]
        },
        "PostTasksByProjectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/services/tasks/postTasksByProject.postTasksByProject",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-postTasksByProject",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PostTasksByProjectLogGroup"
          ]
        },
        "PutTasksByProjectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/services/tasks/putTasksByProject.putTasksByProject",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-putTasksByProject",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PutTasksByProjectLogGroup"
          ]
        },
        "DeleteTasksByProjectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/services/tasks/deleteTasksByProject.deleteTasksByProject",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-deleteTasksByProject",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteTasksByProjectLogGroup"
          ]
        },
        "PostUserToProjectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/services/postUserToProject.postUserToProject",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-postUserToProject",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PostUserToProjectLogGroup"
          ]
        },
        "PostUserToTaskLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
              "S3Key": "serverless/aws-lambda/dev/1744053759671-2025-04-07T19:22:39.671Z/aws-lambda.zip"
            },
            "Handler": "src/services/postUserToTask.postUserToTask",
            "Runtime": "nodejs20.x",
            "FunctionName": "aws-lambda-dev-postUserToTask",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PostUserToTaskLogGroup"
          ]
        },
        "GetAllUsersLambdaVersionljrkGVGcsxX2Tgj2zwLxdWyDwcaiZMAdsN3zTkeKqY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAllUsersLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "GetUserLambdaVersionvZO9RpL6orey6jBJNq9lt1dijkCNQwLJzMzKbVeqk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "PostUserLambdaVersionIEQ2Y1EZvjfzWFyYRNhnoNJ5UCzMP1jzOQCM9cuo8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PostUserLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "PutUserLambdaVersionLrjVVbMmAah8hvdqy5aZe4YQMqK9ZtrhvI1hnVjjgk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PutUserLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "DeleteUserLambdaVersionXFEWlEFmpIHkvtMWoPKiIJKiCyuy8CVmQoVDD1JoA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteUserLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "GetAllProjectsLambdaVersionu8OiXP4wVtBZcqNGP6BUwOJ2MmAawrOK8FdNB9856eY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAllProjectsLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "GetProjectLambdaVersionBPR5RSqlWoxfsv2IFqHgxI8mROCt0B5r5RZDlN9nzgI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetProjectLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "PostProjectLambdaVersionyAx1nK3wlRhvXVJB0HB6TQ1bbQS6Y88JXcYYPIgZflo": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PostProjectLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "PutProjectLambdaVersionIlYRT1p90Z6zQO1SAIZKbuOycx8843Zl4u0NS7VG8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PutProjectLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "DeleteProjectLambdaVersioncXztuTkJ8YD87DpsrY0MN9ja8E3BRydtiyl7GP4MI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteProjectLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "PostTasksByProjectLambdaVersionQBHJH3cAGxRNxU9HEEa043sBrSK0iCttR96miHDHOM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PostTasksByProjectLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "PutTasksByProjectLambdaVersionQCMsaQNrGOM1u7YCGD6UN9SXCXI0i8k7yOcfJ7y0nw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PutTasksByProjectLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "DeleteTasksByProjectLambdaVersionASOe6ofrZzW6tlzrScXRkWpZ8th8s73lUSgUOUGPF3E": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteTasksByProjectLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "PostUserToProjectLambdaVersiononr5Cu2EDAB2YakiKFtX9uuH6GCqGb4KJ7p3YrzlTE": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PostUserToProjectLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "PostUserToTaskLambdaVersionsR4oHBCbZHVvRh8UimlCoS4htVwugg47FWgzuuJ9nY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PostUserToTaskLambdaFunction"
            },
            "CodeSha256": "TAcIlwwIjeIAQ6yL/lLPZHbiWVNkWEjGk8cPIYTFUGA="
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-aws-lambda",
            "ProtocolType": "HTTP"
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "GetAllUsersLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAllUsersLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetAllUsers": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetAllUsersLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetUser": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /user",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetAllUsers"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetAllUsers"
        },
        "GetUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetUserUseridVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /user/{userId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetUser"
        },
        "PostUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PostUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationPostUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "PostUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostUser": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /user",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationPostUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationPostUser"
        },
        "PutUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PutUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationPutUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "PutUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutUserUseridVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /user/{userId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationPutUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationPutUser"
        },
        "DeleteUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDeleteUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DeleteUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteUserUseridVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /user/{userId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDeleteUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDeleteUser"
        },
        "GetAllProjectsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAllProjectsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetAllProjects": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetAllProjectsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetProject": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /project",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetAllProjects"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetAllProjects"
        },
        "GetProjectLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetProjectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetProject": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetProjectLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetProjectProjectidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /project/{projectId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetProject"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetProject"
        },
        "PostProjectLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PostProjectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationPostProject": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "PostProjectLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostProject": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /project",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationPostProject"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationPostProject"
        },
        "PutProjectLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PutProjectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationPutProject": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "PutProjectLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutProjectProjectidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /project/{projectId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationPutProject"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationPutProject"
        },
        "DeleteProjectLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteProjectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDeleteProject": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DeleteProjectLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteProjectProjectidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /project/{projectId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDeleteProject"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDeleteProject"
        },
        "PostTasksByProjectLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PostTasksByProjectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationPostTasksByProject": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "PostTasksByProjectLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostTaskbyproject": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /taskbyproject",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationPostTasksByProject"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationPostTasksByProject"
        },
        "PutTasksByProjectLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PutTasksByProjectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationPutTasksByProject": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "PutTasksByProjectLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutTaskbyprojectProjectidVarTaskidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /taskbyproject/{projectId}/{taskId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationPutTasksByProject"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationPutTasksByProject"
        },
        "DeleteTasksByProjectLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteTasksByProjectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDeleteTasksByProject": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DeleteTasksByProjectLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteTaskbyprojectProjectidVarTaskidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /taskbyproject/{projectId}/{taskId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDeleteTasksByProject"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDeleteTasksByProject"
        },
        "PostUserToProjectLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PostUserToProjectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationPostUserToProject": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "PostUserToProjectLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostUsertoproject": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /usertoproject",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationPostUserToProject"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationPostUserToProject"
        },
        "PostUserToTaskLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PostUserToTaskLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationPostUserToTask": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "PostUserToTaskLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostUsertotask": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /usertotask",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationPostUserToTask"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationPostUserToTask"
        },
        "ProjectSystemTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "ProyectosTareas",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "PK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "SK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "GSI1PK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "GSI1SK",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "PK",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "SK",
                "KeyType": "RANGE"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "GSI1",
                "KeySchema": [
                  {
                    "AttributeName": "GSI1PK",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "GSI1SK",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-1-8df7a401-01f5",
          "Export": {
            "Name": "sls-aws-lambda-dev-ServerlessDeploymentBucketName"
          }
        },
        "GetAllUsersLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAllUsersLambdaVersionljrkGVGcsxX2Tgj2zwLxdWyDwcaiZMAdsN3zTkeKqY"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-GetAllUsersLambdaFunctionQualifiedArn"
          }
        },
        "GetUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserLambdaVersionvZO9RpL6orey6jBJNq9lt1dijkCNQwLJzMzKbVeqk"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-GetUserLambdaFunctionQualifiedArn"
          }
        },
        "PostUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PostUserLambdaVersionIEQ2Y1EZvjfzWFyYRNhnoNJ5UCzMP1jzOQCM9cuo8"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-PostUserLambdaFunctionQualifiedArn"
          }
        },
        "PutUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PutUserLambdaVersionLrjVVbMmAah8hvdqy5aZe4YQMqK9ZtrhvI1hnVjjgk"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-PutUserLambdaFunctionQualifiedArn"
          }
        },
        "DeleteUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteUserLambdaVersionXFEWlEFmpIHkvtMWoPKiIJKiCyuy8CVmQoVDD1JoA"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-DeleteUserLambdaFunctionQualifiedArn"
          }
        },
        "GetAllProjectsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAllProjectsLambdaVersionu8OiXP4wVtBZcqNGP6BUwOJ2MmAawrOK8FdNB9856eY"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-GetAllProjectsLambdaFunctionQualifiedArn"
          }
        },
        "GetProjectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetProjectLambdaVersionBPR5RSqlWoxfsv2IFqHgxI8mROCt0B5r5RZDlN9nzgI"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-GetProjectLambdaFunctionQualifiedArn"
          }
        },
        "PostProjectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PostProjectLambdaVersionyAx1nK3wlRhvXVJB0HB6TQ1bbQS6Y88JXcYYPIgZflo"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-PostProjectLambdaFunctionQualifiedArn"
          }
        },
        "PutProjectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PutProjectLambdaVersionIlYRT1p90Z6zQO1SAIZKbuOycx8843Zl4u0NS7VG8"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-PutProjectLambdaFunctionQualifiedArn"
          }
        },
        "DeleteProjectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteProjectLambdaVersioncXztuTkJ8YD87DpsrY0MN9ja8E3BRydtiyl7GP4MI"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-DeleteProjectLambdaFunctionQualifiedArn"
          }
        },
        "PostTasksByProjectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PostTasksByProjectLambdaVersionQBHJH3cAGxRNxU9HEEa043sBrSK0iCttR96miHDHOM"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-PostTasksByProjectLambdaFunctionQualifiedArn"
          }
        },
        "PutTasksByProjectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PutTasksByProjectLambdaVersionQCMsaQNrGOM1u7YCGD6UN9SXCXI0i8k7yOcfJ7y0nw"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-PutTasksByProjectLambdaFunctionQualifiedArn"
          }
        },
        "DeleteTasksByProjectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteTasksByProjectLambdaVersionASOe6ofrZzW6tlzrScXRkWpZ8th8s73lUSgUOUGPF3E"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-DeleteTasksByProjectLambdaFunctionQualifiedArn"
          }
        },
        "PostUserToProjectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PostUserToProjectLambdaVersiononr5Cu2EDAB2YakiKFtX9uuH6GCqGb4KJ7p3YrzlTE"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-PostUserToProjectLambdaFunctionQualifiedArn"
          }
        },
        "PostUserToTaskLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PostUserToTaskLambdaVersionsR4oHBCbZHVvRh8UimlCoS4htVwugg47FWgzuuJ9nY"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-PostUserToTaskLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-aws-lambda-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}